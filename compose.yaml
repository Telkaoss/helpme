
services:

  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.letsencryptresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.email=votremail@email.com"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
#      - "8080:8080" # Dashboard Traefik
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt" # Volume pour stocker les certificats
    networks:
      - proxy
# This is a Comet full stack with Zilean, flaresolverr, Warp, Prowlarr/Jackett deployed through docker compose using Traefik as a reverse proxy.
  Comet:
    image: g0ldyy/comet@sha256:1df857a1dacd1457e433eaac1046fab794d592a9cfd14af4f547d364799acd67
    container_name: comet
    restart: unless-stopped
#     ports: #uncomment this if you're not using a reverse proxy
#     - 8000:8000
    env_file: #uncomment this if you want to use a .env file, otherwise update below in environment
      - config.env
#    environment: #comment this out/remove if you want to use a .env file
    networks:
     proxy:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.comet.entrypoints=http"
      - "traefik.http.routers.comet.rule=Host(`comet.nomdedomaine.com`)"
      - "traefik.http.middlewares.comet-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.comet.middlewares=comet-https-redirect"
      - "traefik.http.routers.comet-secure.entrypoints=https"
      - "traefik.http.routers.comet-secure.rule=Host(`comet.nomdedomaine.com`)"
      - "traefik.http.routers.comet-secure.tls=true"
      - "traefik.http.routers.comet-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.comet-secure.service=comet"
      - "traefik.http.services.comet.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy"



#This will allow you to bypass Cloudflare checks (necessary for some indexers)      
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:pr-1282
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=Etc/UTC
    networks:
      proxy:
    ports:
      - 8191:8191
    restart: unless-stopped

#This is your debrid proxy.
  warp:
    image: caomingjun/warp
    container_name: warp
    restart: unless-stopped
    ports:
      - 1080:1080
    environment:
      - WARP_SLEEP=2
      - WARP_LICENSE_KEY=69A3v7Va-P3B48JF9-581LV4rv # optional
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      - warp_data:/var/lib/cloudflare-warp
    networks:
      proxy:
    healthcheck:
      test: curl -fsS "https://cloudflare.com/cdn-cgi/trace" | grep -qE "warp=(plus|on)" || exit 1
      interval: 15s

      timeout: 5s
      retries: 3

#You can only use one indexer at a time, pick either Jackett or Prowlarr below and ensure it aligns with your .env or environment variables. You will have to add your indexers selected in Comet to your indexer here. Ensure you sign in to the UI for each of these before starting Comet.

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - jackett_data:/config
      - jackett_data:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped
    networks:
      proxy:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.entrypoints=http"
      - "traefik.http.routers.jackett.rule=Host(`jackett.nomdedomaine.com`)"
      - "traefik.http.middlewares.jackett-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.jackett.middlewares=jackett-https-redirect"
      - "traefik.http.routers.jackett-secure.entrypoints=https"
      - "traefik.http.routers.jackett-secure.rule=Host(`jackett.nomdedomaine.com`)"
      - "traefik.http.routers.jackett-secure.tls=true"
      - "traefik.http.routers.jackett-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.jackett-secure.service=jackett"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
      - "traefik.docker.network=proxy"

  Prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    ports:
      - 9696:9696
    volumes:
      - prowlarr_data:/config
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    networks:
      proxy:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.entrypoints=http"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.nomdedomaine.com`)"
      - "traefik.http.middlewares.prowlarr-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.prowlarr.middlewares=prowlarr-https-redirect"
      - "traefik.http.routers.prowlarr-secure.entrypoints=https"
      - "traefik.http.routers.prowlarr-secure.rule=Host(`prowlarr.nomdedomain.com`)"
      - "traefik.http.routers.prowlarr-secure.tls=true"
      - "traefik.http.routers.prowlarr-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.prowlarr-secure.service=prowlarr"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      - "traefik.docker.network=proxy"

  zilean:
    image: ipromknight/zilean:1.4.0
    restart: unless-stopped
    container_name: zilean
    ports:
      - "8181:8181"
    networks:
      proxy:
    volumes:
      - zilean_data:/app/data
    environment:
        Zilean__ElasticSearch__Url: http://elasticsearch:9200
        Zilean__Dmm__MinimumScoreMatch: 40
    healthcheck:
      test: curl --connect-timeout 10 --silent --show-error --fail http://localhost:8181/healthchecks/ping
      timeout: 60s
      interval: 30s
      retries: 10
    depends_on:
      elasticsearch:
        condition: service_healthy

  elasticsearch:
    image: elasticsearch:8.14.1@sha256:ff3998ab3d8a84984e5298d33d01a174fc5f8abed15ad58d0a54364fc63d68d9
    container_name: elasticsearch
    environment:
      ES_SETTING_DISCOVERY_TYPE: single-node
      ES_SETTING_XPACK_SECURITY_ENABLED: false
      ES_SETTING_BOOTSTRAP_MEMORY__LOCK: true
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      proxy:
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - elastic_data:/usr/share/elasticsearch/data:rw

# This assumes you have a proxy network setup with Traefik already existing
networks:
   proxy:
      external: false

# Comment out any volumes not needed or if you would like a persistent volume instead.    
volumes:
  elastic_data:
  warp_data:
  prowlarr_data:
  jackett_data:
  zilean_data:

